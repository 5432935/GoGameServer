// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/core/libs/grpc/ipc/ipc.proto

/*
Package ipc is a generated protocol buffer package.

It is generated from these files:
	src/core/libs/grpc/ipc/ipc.proto

It has these top-level messages:
	Req
	Res
*/
package ipc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	SessionId   uint64 `protobuf:"varint,2,opt,name=sessionId" json:"sessionId,omitempty"`
	Data        []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Req) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Req) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Res struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	SessionId   uint64 `protobuf:"varint,2,opt,name=sessionId" json:"sessionId,omitempty"`
	Data        []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Res) Reset()                    { *m = Res{} }
func (m *Res) String() string            { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()               {}
func (*Res) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Res) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Res) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Res) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Req)(nil), "Req")
	proto.RegisterType((*Res)(nil), "Res")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ipc service

type IpcClient interface {
	Transfer(ctx context.Context, opts ...grpc.CallOption) (Ipc_TransferClient, error)
}

type ipcClient struct {
	cc *grpc.ClientConn
}

func NewIpcClient(cc *grpc.ClientConn) IpcClient {
	return &ipcClient{cc}
}

func (c *ipcClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (Ipc_TransferClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ipc_serviceDesc.Streams[0], c.cc, "/Ipc/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &ipcTransferClient{stream}
	return x, nil
}

type Ipc_TransferClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type ipcTransferClient struct {
	grpc.ClientStream
}

func (x *ipcTransferClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ipcTransferClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ipc service

type IpcServer interface {
	Transfer(Ipc_TransferServer) error
}

func RegisterIpcServer(s *grpc.Server, srv IpcServer) {
	s.RegisterService(&_Ipc_serviceDesc, srv)
}

func _Ipc_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IpcServer).Transfer(&ipcTransferServer{stream})
}

type Ipc_TransferServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type ipcTransferServer struct {
	grpc.ServerStream
}

func (x *ipcTransferServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ipcTransferServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ipc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ipc",
	HandlerType: (*IpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _Ipc_Transfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/core/libs/grpc/ipc/ipc.proto",
}

func init() { proto.RegisterFile("src/core/libs/grpc/ipc/ipc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x2e, 0x4a, 0xd6,
	0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0xcf, 0xc9, 0x4c, 0x2a, 0xd6, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0xcf,
	0x84, 0x60, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0xa5, 0x48, 0x2e, 0xe6, 0xa0, 0xd4, 0x42, 0x21,
	0x05, 0x2e, 0xee, 0xe2, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x64, 0x21, 0x21, 0x19, 0x2e, 0xce, 0xe2, 0xd4, 0xe2, 0xe2, 0xcc,
	0xfc, 0x3c, 0xcf, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x84, 0x80, 0x90, 0x10, 0x17,
	0x4b, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x98, 0x0d, 0x31, 0xba,
	0x98, 0x16, 0x46, 0x1b, 0x29, 0x73, 0x31, 0x7b, 0x16, 0x24, 0x0b, 0xc9, 0x70, 0x71, 0x84, 0x14,
	0x25, 0xe6, 0x15, 0xa7, 0xa5, 0x16, 0x09, 0xb1, 0xe8, 0x05, 0xa5, 0x16, 0x4a, 0x81, 0xc8, 0x62,
	0x25, 0x06, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0x0f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x79, 0x2b, 0x36, 0x53, 0x05, 0x01, 0x00, 0x00,
}
